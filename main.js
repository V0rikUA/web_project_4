/*! For license information please see main.js.LICENSE.txt */
!function(){var e={232:function(e,t){var i,n;void 0===(n=this)&&void 0!==window&&(n=window),i=function(){return n.VerEx=(e=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),t=function(t){function i(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,"","gm"));return e._prefixes="",e._source="",e._suffixes="",e._modifiers="gm",e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,t),e(i,[{key:"add",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";this._source+=e;var t=this._prefixes+this._source+this._suffixes;return this.compile(t,this._modifiers),this}},{key:"startOfLine",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this._prefixes=e?"^":"",this.add()}},{key:"endOfLine",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this._suffixes=e?"$":"",this.add()}},{key:"then",value:function(e){return e=i.sanitize(e),this.add("(?:"+e+")")}},{key:"find",value:function(e){return this.then(e)}},{key:"maybe",value:function(e){return e=i.sanitize(e),this.add("(?:"+e+")?")}},{key:"or",value:function(e){return this._prefixes+="(?:",this._suffixes=")"+this._suffixes,this.add(")|(?:"),e&&this.then(e),this}},{key:"anything",value:function(){return this.add("(?:.*)")}},{key:"anythingBut",value:function(e){return Array.isArray(e)&&(e=e.join("")),e=i.sanitize(e),this.add("(?:[^"+e+"]*)")}},{key:"something",value:function(){return this.add("(?:.+)")}},{key:"somethingBut",value:function(e){return Array.isArray(e)&&(e=e.join("")),e=i.sanitize(e),this.add("(?:[^"+e+"]+)")}},{key:"anyOf",value:function(e){return Array.isArray(e)&&(e=e.join("")),e=i.sanitize(e),this.add("["+e+"]")}},{key:"any",value:function(e){return this.anyOf(e)}},{key:"not",value:function(e){return e=i.sanitize(e),this.add("(?!"+e+")"),this}},{key:"range",value:function(){for(var e="",t=1;t<arguments.length;t+=2)e+=i.sanitize(arguments.length<=t-1?void 0:arguments[t-1])+"-"+i.sanitize(arguments.length<=t?void 0:arguments[t]);return this.add("["+e+"]")}},{key:"lineBreak",value:function(){return this.add("(?:\\r\\n|\\r|\\n)")}},{key:"br",value:function(){return this.lineBreak()}},{key:"tab",value:function(){return this.add("\\t")}},{key:"word",value:function(){return this.add("\\w+")}},{key:"digit",value:function(){return this.add("\\d")}},{key:"whitespace",value:function(){return this.add("\\s")}},{key:"addModifier",value:function(e){return this._modifiers.includes(e)||(this._modifiers+=e),this.add()}},{key:"removeModifier",value:function(e){return this._modifiers=this._modifiers.replace(e,""),this.add()}},{key:"withAnyCase",value:function(){return arguments.length>0&&void 0!==arguments[0]&&!arguments[0]?this.removeModifier("i"):this.addModifier("i")}},{key:"stopAtFirst",value:function(){return arguments.length>0&&void 0!==arguments[0]&&!arguments[0]?this.addModifier("g"):this.removeModifier("g")}},{key:"searchOneLine",value:function(){return arguments.length>0&&void 0!==arguments[0]&&!arguments[0]?this.addModifier("m"):this.removeModifier("m")}},{key:"repeatPrevious",value:function(){for(var e=/\d+/,t=arguments.length,i=Array(t),n=0;n<t;n++)i[n]=arguments[n];var r=i.filter((function(t){return e.test(t)}));return 0===r.length||r.length>2||this.add("{"+r.join(",")+"}"),this}},{key:"oneOrMore",value:function(){return this.add("+")}},{key:"multiple",value:function(e,t,n){return void 0!==e&&(e=i.sanitize(e),this.add("(?:"+e+")")),void 0===t&&void 0===n?this.add("*"):void 0!==t&&void 0===n?this.add("{"+t+",}"):void 0!==t&&void 0!==n&&this.add("{"+t+","+n+"}"),this}},{key:"beginCapture",value:function(){return this._suffixes+=")",this.add("(")}},{key:"endCapture",value:function(){return this._suffixes=this._suffixes.slice(0,-1),this.add(")")}},{key:"replace",value:function(e,t){return(e=e.toString()).replace(this,t)}},{key:"toRegExp",value:function(){var e=this.toString().match(/\/(.*)\/([gimuy]+)?/),t=e[1],i=e[2];return new RegExp(t,i)}}],[{key:"sanitize",value:function(e){return e instanceof RegExp?e.source:"number"==typeof e?e:"string"!=typeof e?"":e.replace(/([\].|*?+(){}^$\\:=[])/g,"\\$&")}}]),i}(function(e){function t(){var t=Reflect.construct(e,Array.from(arguments));return Object.setPrototypeOf(t,Object.getPrototypeOf(this)),t}return t.prototype=Object.create(e.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e,t}(RegExp)),function(){var e=new t;return e.sanitize=t.sanitize,e});var e,t}.apply(t,[]),void 0===i||(e.exports=i)}},t={};function i(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,i),s.exports}!function(){"use strict";class e{constructor(e,t){this._inputSelector=t.inputSelector,this._errorClass=t.errorClass,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._submitButtonSelector=t.submitButtonSelector,this._fieldSelector=t.fieldSelector,this._formElement=e,this._fieldsetElement=this._formElement.querySelector(this._fieldSelector),this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){const i=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),i.textContent=t,i.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}class t{constructor(e,t,i){this._name=e.name,this._link=e.link,this._alt=void 0!==e.alt?e.alt:e.name,this._cardId=e._id,this._likes=e.likes,this._userId=i,this._ownerId=e.owner._id,this._cardTemplate=document.querySelector(t)}isLiked(){return this._likes.find((e=>e._id===this._userId))}toggleLikeButton(){this._likeButton.classList.toggle("gallery-list__like-button-active")}isOwner(){return this._ownerId===this._userId}setLikes(e){this._likes=e,this._likesCounterElement.textContent=this._likes.length}setEventListeners(e){this._likeButton.addEventListener("click",(()=>{e.handleLikeButtonClick()})),this._cardImageElement.addEventListener("click",(()=>{e.handleCardImageClick()})),this.isOwner()&&this._deleteCardButton.addEventListener("click",(()=>{e.handleDeleteButtonClick(this)}))}_getCardElement(){const e=this._cardTemplate.content.querySelector("#template__card").cloneNode(!0);return this.isOwner()||e.querySelector("#template__delete-button").remove(),e}getCardId(){return this._cardId}_populateCardInfo(){const e=this._cardElement.querySelector("#template__image-description");this._cardImageElement=this._cardElement.querySelector("#template__image"),e.textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._alt}removeCard(){this._cardElement.remove(),this._cardElement=null}createCard(){this._cardElement=this._getCardElement(),this._populateCardInfo(),this._likeButton=this._cardElement.querySelector("#template__like-button"),this._deleteCardButton=this._cardElement.querySelector("#template__delete-button"),this._likesCounterElement=this._cardElement.querySelector("#template__like-counter")}getCard(){return this._cardElement}}const n=document.querySelector(".profile__button-edit"),r=".profile__avatar",s=document.querySelector(".profile__button-add-contetnt"),o=document.querySelector(".popup_type_loading");class a{constructor(e){this._popupElement=document.querySelector(e),this._popupCloseButton=this._popupElement.querySelector(".popup__close-button"),this._popupActiveToggleSelector="popup_active",this._handleEscClose=this._handleEscClose.bind(this),this._handleBackgroundClickClose=this._handleBackgroundClickClose.bind(this),this.close=this.close.bind(this)}open(){this._popupElement.classList.add(this._popupActiveToggleSelector),this.setEventListeners()}close(){this.removeEventListeners(),this._popupElement.classList.remove(this._popupActiveToggleSelector)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleBackgroundClickClose(e){e.target===e.currentTarget&&this.close()}setEventListeners(){this._popupCloseButton.addEventListener("click",this.close),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleBackgroundClickClose)}removeEventListeners(){this._popupCloseButton.removeEventListener("click",this.close),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleBackgroundClickClose)}}class l extends a{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popupElement.querySelector(".form"),this._submitBtn=this._form.querySelector('button[type="submit"]'),this._submitBtnText=this._submitBtn.textContent,this._inputList=this._popupElement.querySelectorAll("input")}getInputValues(){return Array.from(this._inputList).reduce(((e,t)=>({...e,[t.name]:t.value})),{})}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitBtn.textContent=e?t:this._submitBtnText}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}changeSubmitHandler(e){this._handleFormSubmit=e}disableSbmitBtn(e){this._submitBtn.disabled=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this._handleFormSubmit)}removeEventListeners(){super.removeEventListeners(),this._form.removeEventListener("submit",this._handleFormSubmit)}close(){super.close(),this._form.reset()}}i(232);const u=new class{constructor(e){let{url:t,headers:i}=e;this._url=t,this._headers=i}_checkResponse(e){return e.ok?e.json():Promise.reject(e.StatusText)}getUserInfo(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/users/me";return fetch(this._url+e,{method:"GET",headers:this._headers}).then((e=>this._checkResponse(e)))}editProfile(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"/users/me";return fetch(this._url+i,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>this._checkResponse(e)))}editAvatar(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/users/me/avatar";return fetch(this._url+t,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}getInitCard(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/cards";return fetch(this._url+e,{method:"GET",headers:this._headers}).then((e=>this._checkResponse(e)))}addCard(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"/cards";return fetch(this._url+i,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>this._checkResponse(e)))}deleteCard(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/cards/";return fetch(this._url+t+e,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e)))}removeLike(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/cards/likes/";return fetch(this._url+t+e,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e)))}addLike(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/cards/likes/";return fetch(this._url+t+e,{method:"PUT",headers:this._headers}).then((e=>this._checkResponse(e)))}}({url:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"2a676dbc-bb82-4a21-8adc-a0cd2428ca04","Content-Type":"application/json"}});let d;Promise.all([u.getUserInfo(),u.getInitCard()]).then((e=>{let[t,i]=e;d=t._id,f.setUserInfo(t.name,t.about),f.setUserAvatar(t.avatar),m.renderItems(i)})).catch((e=>{c(),console.log(e)})).finally((()=>{o.classList.remove("popup_active")}));const c=()=>{f.setUserInfo("Jacques Cousteau","Explorer"),f.setUserAvatar("../images/profile_avatar.png")},h=e=>{E.changeSubmitHandler((t=>{E.disableSbmitBtn(!0),t.preventDefault(),u.deleteCard(e.getCardId()).then((()=>{e.removeCard(),E.close()})).catch(console.log).finally((()=>{E.disableSbmitBtn(!1)}))})),E.open()},_={};var p;p={formSelector:".form",inputSelector:".form__input",errorClass:"form__input-error_active",inactiveButtonClass:"form__submit-button-inactive",inputErrorClass:"form__input_type_error",submitButtonSelector:".form__submit-button",fieldSelector:".form__set"},[...document.querySelectorAll(p.formSelector)].forEach((t=>{const i=new e(t,p),n=t.getAttribute("name");_[n]=i,i.enableValidation()}));const m=new class{constructor(e,t){let{renderer:i}=e;this._renderer=i,this._container=document.querySelector(t)}renderItems(e){Object.keys(e).reverse().forEach((t=>{this.addItem(e[t])}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}({renderer:e=>{const i=new t(e,"#gallary-list__item__template",d);return i.createCard(),i.setLikes(e.likes),i.isLiked()&&i.toggleLikeButton(),i.setEventListeners({handleLikeButtonClick:()=>{!function(e){e.isLiked()?u.removeLike(e.getCardId()).then((t=>{e.setLikes(t.likes),e.toggleLikeButton()})).catch(console.log):u.addLike(e.getCardId()).then((t=>{e.setLikes(t.likes),e.toggleLikeButton()})).catch(console.log)}(i)},handleDeleteButtonClick:()=>{h(i)},handleCardImageClick:()=>v.open(e.link,e.name,e.name)}),i.getCard()}},".gallery-list"),f=new class{constructor(e,t,i){this._userNameElement=document.querySelector(e),this._userProfessionElement=document.querySelector(t),this._userAvatar=document.querySelector(i)}getUserInfo(){return{name:this._userNameElement.textContent,about:this._userProfessionElement.textContent,avatar:this._userAvatar.style.backgroundImage}}setUserInfo(e,t){this._userNameElement.textContent=e,this._userProfessionElement.textContent=t}setUserAvatar(e){this._userAvatar.style.backgroundImage="url(".concat(e,")")}}(".profile__name",".profile__profession",r),v=new class extends a{constructor(e){super(e),this._previewPopupImage=document.querySelector(".popup__preview-image"),this._previewPopupDescription=document.querySelector(".popup__description")}open(e,t,i){this._previewPopupImage.src=e,this._previewPopupImage.alt=t,this._previewPopupDescription.textContent=i,super.open()}}(".popup_type_preview"),g=new l(".popup_type_profile",(e=>{g.disableSbmitBtn(!0),e.preventDefault();const t=g.getInputValues();g.renderLoading(!0),u.editProfile(t.name,t.about).then((e=>{f.setUserInfo(e.name,e.about),g.close()})).catch((e=>{console.log(e)})).finally((()=>{g.renderLoading(!1),g.disableSbmitBtn(!1)}))})),y=new l(".popup_type_new-gallery-item",(e=>{y.disableSbmitBtn(!0),e.preventDefault();const t=y.getInputValues();y.renderLoading(!0),u.addCard(t.newItemTitle,t.newItemImageLink).then((e=>{m.addItem(e),y.close()})).catch(console.log).finally((()=>{y.renderLoading(!1),y.disableSbmitBtn(!1)}))})),k=new l(".popup_type_change-avatar",(e=>{k.disableSbmitBtn(!0),e.preventDefault();const t=k.getInputValues();k.renderLoading(!0),u.editAvatar(t.avatar).then((e=>{f.setUserAvatar(e.avatar),k.close()})).catch(console.log).finally((()=>{k.renderLoading(!1),k.disableSbmitBtn(!1)}))})),E=new l(".popup_type_delete-card",h);n.addEventListener("click",(()=>{g.setInputValues(f.getUserInfo()),_.profileEditForm.resetValidation(),g.open()})),s.addEventListener("click",(()=>{_.newGalleryItemForm.resetValidation(),y.open()})),document.querySelector(r).addEventListener("click",(()=>{_.changeAvatarForm.resetValidation(),k.open()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,