/*! For license information please see main.js.LICENSE.txt */
!function(){var e={232:function(e,t){var i,r;void 0===(r=this)&&void 0!==window&&(r=window),i=function(){return r.VerEx=(e=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),t=function(t){function i(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,"","gm"));return e._prefixes="",e._source="",e._suffixes="",e._modifiers="gm",e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,t),e(i,[{key:"add",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";this._source+=e;var t=this._prefixes+this._source+this._suffixes;return this.compile(t,this._modifiers),this}},{key:"startOfLine",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this._prefixes=e?"^":"",this.add()}},{key:"endOfLine",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this._suffixes=e?"$":"",this.add()}},{key:"then",value:function(e){return e=i.sanitize(e),this.add("(?:"+e+")")}},{key:"find",value:function(e){return this.then(e)}},{key:"maybe",value:function(e){return e=i.sanitize(e),this.add("(?:"+e+")?")}},{key:"or",value:function(e){return this._prefixes+="(?:",this._suffixes=")"+this._suffixes,this.add(")|(?:"),e&&this.then(e),this}},{key:"anything",value:function(){return this.add("(?:.*)")}},{key:"anythingBut",value:function(e){return Array.isArray(e)&&(e=e.join("")),e=i.sanitize(e),this.add("(?:[^"+e+"]*)")}},{key:"something",value:function(){return this.add("(?:.+)")}},{key:"somethingBut",value:function(e){return Array.isArray(e)&&(e=e.join("")),e=i.sanitize(e),this.add("(?:[^"+e+"]+)")}},{key:"anyOf",value:function(e){return Array.isArray(e)&&(e=e.join("")),e=i.sanitize(e),this.add("["+e+"]")}},{key:"any",value:function(e){return this.anyOf(e)}},{key:"not",value:function(e){return e=i.sanitize(e),this.add("(?!"+e+")"),this}},{key:"range",value:function(){for(var e="",t=1;t<arguments.length;t+=2)e+=i.sanitize(arguments.length<=t-1?void 0:arguments[t-1])+"-"+i.sanitize(arguments.length<=t?void 0:arguments[t]);return this.add("["+e+"]")}},{key:"lineBreak",value:function(){return this.add("(?:\\r\\n|\\r|\\n)")}},{key:"br",value:function(){return this.lineBreak()}},{key:"tab",value:function(){return this.add("\\t")}},{key:"word",value:function(){return this.add("\\w+")}},{key:"digit",value:function(){return this.add("\\d")}},{key:"whitespace",value:function(){return this.add("\\s")}},{key:"addModifier",value:function(e){return this._modifiers.includes(e)||(this._modifiers+=e),this.add()}},{key:"removeModifier",value:function(e){return this._modifiers=this._modifiers.replace(e,""),this.add()}},{key:"withAnyCase",value:function(){return arguments.length>0&&void 0!==arguments[0]&&!arguments[0]?this.removeModifier("i"):this.addModifier("i")}},{key:"stopAtFirst",value:function(){return arguments.length>0&&void 0!==arguments[0]&&!arguments[0]?this.addModifier("g"):this.removeModifier("g")}},{key:"searchOneLine",value:function(){return arguments.length>0&&void 0!==arguments[0]&&!arguments[0]?this.addModifier("m"):this.removeModifier("m")}},{key:"repeatPrevious",value:function(){for(var e=/\d+/,t=arguments.length,i=Array(t),r=0;r<t;r++)i[r]=arguments[r];var n=i.filter((function(t){return e.test(t)}));return 0===n.length||n.length>2||this.add("{"+n.join(",")+"}"),this}},{key:"oneOrMore",value:function(){return this.add("+")}},{key:"multiple",value:function(e,t,r){return void 0!==e&&(e=i.sanitize(e),this.add("(?:"+e+")")),void 0===t&&void 0===r?this.add("*"):void 0!==t&&void 0===r?this.add("{"+t+",}"):void 0!==t&&void 0!==r&&this.add("{"+t+","+r+"}"),this}},{key:"beginCapture",value:function(){return this._suffixes+=")",this.add("(")}},{key:"endCapture",value:function(){return this._suffixes=this._suffixes.slice(0,-1),this.add(")")}},{key:"replace",value:function(e,t){return(e=e.toString()).replace(this,t)}},{key:"toRegExp",value:function(){var e=this.toString().match(/\/(.*)\/([gimuy]+)?/),t=e[1],i=e[2];return new RegExp(t,i)}}],[{key:"sanitize",value:function(e){return e instanceof RegExp?e.source:"number"==typeof e?e:"string"!=typeof e?"":e.replace(/([\].|*?+(){}^$\\:=[])/g,"\\$&")}}]),i}(function(e){function t(){var t=Reflect.construct(e,Array.from(arguments));return Object.setPrototypeOf(t,Object.getPrototypeOf(this)),t}return t.prototype=Object.create(e.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e,t}(RegExp)),function(){var e=new t;return e.sanitize=t.sanitize,e});var e,t}.apply(t,[]),void 0===i||(e.exports=i)}},t={};function i(r){var n=t[r];if(void 0!==n)return n.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,i),s.exports}!function(){"use strict";class e{constructor(e,t){this._formSelector=e,this._inputSelector=t.inputSelector,this._errorClass=t.errorClass,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._submitButtonSelector=t.submitButtonSelector,this._fieldSelector=t.fieldSelector,this._formElement=document.querySelector(this._formSelector),this._fieldsetElement=this._formElement.querySelector(this._fieldSelector),this._inputList=[...this._formElement.querySelectorAll(this._inputSelector)],this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}_showInputError(e,t){const i=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),i.textContent=t,i.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}class t{constructor(e,t){let{name:i,link:r,alt:n=null,_id:s,owner:o,likes:a}=e;this._name=i,this._link=r,this._alt=null!==n?n:i,this._cardId=s,this._likes=a,this._userId=t.userId,this._cardOwnerId=o._id,this._cardTemplateSelector=t.cardTemplateSelector,this._cardSelector=t.cardSelector,this._imageSelector=t.imageSelector,this._imageDescriptionSelector=t.imageDescriptionSelector,this._likeButtonSelector=t.likeButtonSelector,this._likeActiveSelector=t.likeActiveSelector,this._likeCounterSelector=t.likeCounterSelector,this._deleteButtonSelector=t.deleteButtonSelector,this._previewPopupImageSelector=t.previewPopupImageSelector,this._previewPopupDescriptionSelector=t.previewPopupDescriptionSelector,this._handleCardImageClick=t.handleCardImageClick,this._cardTemplate=document.querySelector(this._cardTemplateSelector),this._handleDeleteServerRequest=t.handleDeleteServerRequest,this._handleLikeServerRequest=t.handleLikeServerRequest,this._handleDleteClick=t.handleDleteClick,this._popupDeleteButtonElement=document.querySelector(t.popupDeleteConfirmationButtonSelector),this._handleDeleteConfirmationSubmit=t.handleDeleteConfirmationSubmit}_initiateLikes(){this.setLikes(this._likes),this.isLiked()&&this._toggleLikeButton()}isLiked(){return this._likes.find((e=>e._id===this._userId))}_toggleLikeButton(){this._likeButton.classList.toggle(this._likeActiveSelector)}setLikes(e){this._likes=e,this._cardElement.querySelector(this._likeCounterSelector).textContent=this._likes.length}getCardId(){return this._cardId}_handleLikeButtonClick(){this._handleLikeServerRequest(this),this._toggleLikeButton()}_handleDeleteButtonClick(){this._handleDleteClick(),this._popupDeleteButtonElement.addEventListener("click",(()=>{this._handleConfirmedDeleteClick()}))}_handleConfirmedDeleteClick(){this._removeCardLocal(),this._handleDeleteServerRequest(this._cardId),this._handleDeleteConfirmationSubmit()}_removeCardLocal(){this._cardElement.remove(),this._cardElement=null}_isOwner(e){return this._userId===e}_setEventListeners(){this._likeButton=this._cardElement.querySelector(this._likeButtonSelector),this._likeButton.addEventListener("click",(()=>{this._handleLikeButtonClick()})),this._isOwner(this._cardOwnerId)&&this._cardElement.querySelector(this._deleteButtonSelector).addEventListener("click",(()=>{this._handleDeleteButtonClick()})),this._cardElement.querySelector(this._imageSelector).addEventListener("click",(()=>{this._handleCardImageClick(this._link,this._name,this._alt)}))}_getCardElement(){const e=this._cardTemplate.content.querySelector(this._cardSelector).cloneNode(!0);return this._isOwner(this._cardOwnerId)||e.querySelector(this._deleteButtonSelector).remove(),e}_populateCardInfo(){const e=this._cardElement.querySelector(this._imageDescriptionSelector),t=this._cardElement.querySelector(this._imageSelector);e.textContent=this._name,t.src=this._link,t.alt=this._alt}getCard(){return this._cardElement=this._getCardElement(),this._populateCardInfo(),this._setEventListeners(),this._initiateLikes(),this._cardElement}}const r=document.querySelector(".profile__button-edit"),n=".profile__avatar",s=document.querySelector(".form__input_type_name"),o=document.querySelector(".form__input_type_title"),a=document.querySelector(".profile__button-add-contetnt"),l=(document.querySelector(".form_type_new-gallery-item"),[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg",alt:"the view of the river surrounded by trees in front of mountains"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg",alt:"the view of lake between two mountains"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg",alt:"the view of sunset upon the mountains"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg",alt:"the view of mountains at night under the bright stars"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg",alt:"lake view in the mountains"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg",alt:"the view of the boats at mountain lake near the pier"}]),u=".popup_type_preview",c=document.querySelector(".popup__loading"),h={inputSelector:".form__input",errorClass:"form__input-error_active",inactiveButtonClass:"form__submit-button-inactive",inputErrorClass:"form__input_type_error",submitButtonSelector:".form__submit-button",fieldSelector:".form__set"};class d{constructor(e){this._popupElement=document.querySelector(e),this._popupCloseButton=this._popupElement.querySelector(".popup__close-button"),this._popupActiveToggleSelector="popup_active",this._handleEscClose=this._handleEscClose.bind(this),this._handleBackgroundClickClose=this._handleBackgroundClickClose.bind(this),this.close=this.close.bind(this)}open(){this._popupElement.classList.add(this._popupActiveToggleSelector),this.setEventListeners()}close(){this._popupElement.classList.remove(this._popupActiveToggleSelector),this.removeEventListeners()}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleBackgroundClickClose(e){e.target===e.currentTarget&&this.close()}setEventListeners(){this._popupCloseButton.addEventListener("click",this.close),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleBackgroundClickClose)}removeEventListeners(){this._popupCloseButton.removeEventListener("click",this.close),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleBackgroundClickClose)}}class _ extends d{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popupElement.querySelector("form"),this._handleSubmitButton=this._handleSubmitButton.bind(this)}_getInputValues(){return Array.from(this._popupElement.querySelectorAll("input")).reduce(((e,t)=>({...e,[t.name]:t.value})),{})}_handleSubmitButton(e){e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",this._handleSubmitButton)}removeEventListeners(){super.removeEventListeners(),this._form.removeEventListener("submit",this._handleSubmitButton)}close(){super.close(),this._form.reset()}}i(232);const p=new class{constructor(e){let{url:t,headers:i}=e;this._url=t,this._headers=i}_checkResponse(e){return e.ok?e.json():Promise.reject(e.StatusText)}getUserInfo(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/users/me";return fetch(this._url+e,{method:"GET",headers:this._headers}).then((e=>this._checkResponse(e)))}editProfile(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"/users/me";return fetch(this._url+i,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>this._checkResponse(e)))}editAvatar(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/users/me/avatar";return fetch(this._url+t,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}getInitCard(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/cards";return fetch(this._url+e,{method:"GET",headers:this._headers}).then((e=>this._checkResponse(e)))}addCard(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"/cards";return fetch(this._url+i,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>this._checkResponse(e)))}deleteCard(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/cards/";return fetch(this._url+t+e,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e)))}removeLike(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/cards/likes/";return fetch(this._url+t+e,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e)))}addLike(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"/cards/likes/";return fetch(this._url+t+e,{method:"PUT",headers:this._headers}).then((e=>this._checkResponse(e)))}}({url:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"2a676dbc-bb82-4a21-8adc-a0cd2428ca04","Content-Type":"application/json"}}),m={cardTemplateSelector:"#gallary-list__item__template",cardSelector:".gallery-list__item",imageSelector:".gallery-list__image",imageDescriptionSelector:".gallery-list__image-description",likeActiveSelector:"gallery-list__like-button-active",likeButtonSelector:".gallery-list__like-button",likeCounterSelector:".gallery-list__like-counter",deleteButtonSelector:".gallery-list__delete-button",previewPopupImageSelector:".popup__preview-image",previewPopupDescriptionSelector:".popup__description",popupDeleteConfirmationButtonSelector:".popup__button_delete-card",previewPopupElement:u,handleCardImageClick:(e,t,i)=>{g.open(e,t,i)},handleDeleteServerRequest:e=>{v(e)},handleLikeServerRequest:e=>{!function(e){e.isLiked()?p.removeLike(e.getCardId()).then((t=>{e.setLikes(t.likes)})).catch(console.log):p.addLike(e.getCardId()).then((t=>{e.setLikes(t.likes)})).catch(console.log)}(e)},handleDleteClick:()=>{b.open()},handleDeleteConfirmationSubmit:()=>{b.close()}};Promise.all([p.getUserInfo(),p.getInitCard()]).then((e=>{let[t,i]=e;m.userId=t._id,y.setUserInfo(t.name,t.about),y.setUserAvatar(t.avatar),I.renderItems(i)})).catch((e=>{f(),alert(e)})).finally((()=>{c.classList.remove("popup_active")}));const f=()=>{y.setUserInfo("Jacques Cousteau","Explorer"),y.setUserAvatar("../images/profile_avatar.png"),I.renderItems(l)},v=e=>{p.deleteCard(e).catch(console.log)},y=new class{constructor(e,t,i){this._userNameElement=document.querySelector(e),this._userProfessionElement=document.querySelector(t),this._userAvatar=document.querySelector(i)}getUserInfo(){return{userName:this._userNameElement.textContent,userJob:this._userProfessionElement.textContent,userAvatar:this._userAvatar.style.backgroundImage}}setUserInfo(e,t){this._userNameElement.textContent=e,this._userProfessionElement.textContent=t}setUserAvatar(e){this._userAvatar.style.backgroundImage="url(".concat(e,")")}}(".profile__name",".profile__profession",n),g=new class extends d{constructor(e){super(e),this._previewPopupImage=document.querySelector(".popup__preview-image"),this._previewPopupDescription=document.querySelector(".popup__description")}open(e,t,i){this._previewPopupImage.src=e,this._previewPopupImage.alt=t,this._previewPopupDescription.textContent=i,super.open()}}(u),k=new _(".popup_type_profile",(e=>{const t=document.querySelector(".form__submit-button_profile");t.textContent="Saving...",p.editProfile(e.name,e.about).then((e=>{y.setUserInfo(e.name,e.about)})).catch((e=>{console.log(e)})).finally((()=>{t.textContent="Save",k.close()}))})),S=new _(".popup_type_new-gallery-item",(e=>{const t=document.querySelector(".form__submit-button_new-gallery-item");t.textContent="Saving...",p.addCard(e.newItemTitle,e.newItemImageLink).then((e=>{I.addItem(e)})).catch(console.log).finally((()=>{S.close(),t.textContent="Create"}))})),E=new _(".popup_type_change-avatar",(e=>{const t=document.querySelector(".form__submit-button_change-avatar");t.textContent="Saving...",p.editAvatar(e.avatar).then((e=>{y.setUserAvatar(e.avatar)})).catch((e=>new Error(e))).finally((()=>{E.close(),t.textContent="Change"}))})),b=new d(".popup_type_delete-card"),C=new e(".form_type_profile",h),w=new e(".form_type_new-gallery-item",h),L=new e(".form_type_change-avatar",h),I=new class{constructor(e,t){let{renderer:i}=e;this._renderer=i,this._container=document.querySelector(t)}renderItems(e){Object.keys(e).reverse().forEach((t=>{this.addItem(e[t])}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}({renderer:e=>new t(e,m).getCard()},".gallery-list");r.addEventListener("click",(()=>{var e;e=y.getUserInfo(),s.value=e.userName,o.value=e.userJob,C.resetValidation(),k.open()})),a.addEventListener("click",(()=>{w.resetValidation(),S.open()})),document.querySelector(n).addEventListener("click",(()=>{L.resetValidation(),E.open()})),C.enableValidation(),w.enableValidation(),L.enableValidation()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,